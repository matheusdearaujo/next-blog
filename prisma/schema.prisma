generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String    @id @default(cuid())
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?   @map("author_id")
  title     String
  slug      String
  content   String?
  published Boolean   @default(false)
  comments  Comment[]
  createdAt DateTime  @default(now())   @map("created_at")
  updatedAt DateTime  @updatedAt        @map("updated_at")

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @map("user_id")
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?   @map("post_id")
  createdAt DateTime  @default(now())   @map("created_at")
  updatedAt DateTime  @updatedAt        @map("updated_at")

  @@map("comments")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
